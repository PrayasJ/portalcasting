% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities.R
\name{pass_and_call}
\alias{pass_and_call}
\alias{args_to_pass}
\title{Pass arguments from a parent to a child function and call the
 child function}
\usage{
pass_and_call(child = NULL, lev = -1, ...)

args_to_pass(child = NULL, lev = -1, ...)
}
\arguments{
\item{child}{The function that is called with the inhereted and potentially
updated arguments.}

\item{lev}{The number of frames to go back in the stack. Generally should
be kept as \code{-1}, in reference to inheritance from the parent 
function.}

\item{...}{Named arguments to be updated from the parent's definition 
before passing to the child function.}
}
\value{
\code{pass_and_call}: the value returned from \code{child}.
 \code{args_to_pass}: \code{list} of args to pass to \code{child}.
}
\description{
This set of functions provides utility for passing named
 arguments through a function pipeline when the functions do not all
 necessarily take the same arguments. \cr \cr
 \emph{They should only be called from inside other functions}, which
 is checked for by the function \code{\link{error_if_deep}}. \cr \cr
 The basic idea is that a \code{child} function is to be called within a
 \code{parent} function and should generally be using the arguments as
 input to the \code{parent}, although arguments may need to get updated
 before passing to the child. \cr \cr
 \code{pass_and_call} does the full passing of arguments and calling of 
  the \code{child}. \cr \cr
 \code{args_to_pass} creates the \code{list} of args to pass to the
  \code{child}, which includes removing arguments not in the 
  \code{\link{formals}} of \code{child}.
}
\details{
Arguments are evaluated in the environment they were created to 
 so that depdencies which have been removed through passing down into
 \code{child} do not cause the evaluation to break. Evaluating the 
 arguments in a different (child) environment can be done through 
 running the code within a child function and passing the updated 
 arguments through \code{...}. \cr \cr
 Arguments can be set to \code{NULL}, even if that's not the default,
 and they will be retained as part of the named arguments \code{list} to
 ensure that they are, in fact, used as \code{NULL}. \cr \cr
 Use of \code{\link[DesignLibrary]{match.call.defaults}} ensures that
 arguments left as defaults are passed along.
}
\examples{
  yy <- function(n = 1, z = sqrt(w), w = 40){
          pass_and_call(rnorm, mean = z, sd  = w)
        }

  yyy <- function(d = 43){
           pass_and_call(yy, n = d)
         }
  yy()
  yy(w = 30)
  yy(z = 0, w = 1)
  yyy()
  yyy(d = 2)

  zz <- function(n = 1, sd = 40, other_arg = "xx"){
          args_to_pass(rnorm)
        }

}
