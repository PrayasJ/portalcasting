% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fill_dir.R
\name{fill_directory}
\alias{fill_directory}
\alias{fill_dir}
\alias{fill_data}
\alias{fill_models}
\alias{fill_casts}
\alias{fill_raw}
\title{Fill a forecasting directory with basic components.}
\usage{
fill_dir(main = ".", models = prefab_models(), end_moon = NULL,
  lead_time = 12, cast_date = Sys.Date(), start_moon = 217,
  confidence_level = 0.95, hist_covariates = TRUE,
  cast_covariates = TRUE, directory = "portalPredictions",
  raw_data = "PortalData", source_name = "current_archive",
  append_cast_csv = TRUE, controls_m = NULL,
  controls_r = rodents_controls(), control_cdl = climate_dl_control(),
  downloads = zenodo_downloads(c("1215988", "833438")), quiet = FALSE,
  verbose = FALSE, save = TRUE, overwrite = TRUE,
  filename_moons = "moon_dates.csv",
  filename_config = "dir_config.yaml", filename_cov = "covariates.csv",
  filename_cov_casts = "covariate_casts.csv",
  filename_meta = "metadata.yaml", cleanup = TRUE, arg_checks = TRUE)

fill_data(main = ".", models = prefab_models(), end_moon = NULL,
  lead_time = 12, cast_date = Sys.Date(), start_moon = 217,
  confidence_level = 0.95, hist_covariates = TRUE,
  cast_covariates = TRUE, directory = "portalPredictions",
  raw_data = "PortalData", source_name = "current_archive",
  append_cast_csv = TRUE, controls_r = rodents_controls(),
  controls_m = NULL, control_cdl = climate_dl_control(),
  downloads = zenodo_downloads(c("1215988", "833438")), quiet = FALSE,
  verbose = FALSE, save = TRUE, overwrite = TRUE,
  filename_moons = "moon_dates.csv", filename_cov = "covariates.csv",
  filename_cov_casts = "covariate_casts.csv",
  filename_meta = "metadata.yaml", filename_config = "dir_config.yaml",
  cleanup = TRUE, arg_checks = TRUE)

fill_models(main = ".", models = prefab_models(), controls_m = NULL,
  quiet = FALSE, verbose = FALSE, overwrite = TRUE,
  arg_checks = TRUE)

fill_casts(main = ".", directory = "portalPredictions",
  quiet = FALSE, verbose = FALSE, overwrite = TRUE,
  arg_checks = TRUE)

fill_raw(main = ".", downloads = zenodo_downloads(c("1215988",
  "833438")), quiet = FALSE, cleanup = TRUE, arg_checks = TRUE)
}
\arguments{
\item{main}{\code{character} value of the name of the main component of
the directory tree.}

\item{models}{\code{character} vector of name(s) of model(s) to 
include.}

\item{end_moon}{\code{integer} (or integer \code{numeric}) newmoon number 
of the last sample to be included. Default value is \code{NULL}, which 
equates to the most recently included sample.}

\item{lead_time}{\code{integer} (or integer \code{numeric}) value for the
number of timesteps forward a cast will cover.}

\item{cast_date}{\code{Date} from which future is defined (the origin of
the cast). In the recurring forecasting, is set to today's date
using \code{\link{Sys.Date}}.}

\item{start_moon}{\code{integer} (or integer \code{numeric}) newmoon number 
of the first sample to be included. Default value is \code{217}, 
corresponding to \code{1995-01-01}.}

\item{confidence_level}{\code{numeric} confidence level used in 
summarizing model output. Must be between \code{0} and \code{1}.}

\item{hist_covariates}{\code{logical} indicator of whether or not 
historical covariates are to be included.}

\item{cast_covariates}{\code{logical} indicator whether or not -casted 
covariates are to be included.}

\item{directory}{\code{character} value of the directory name.}

\item{raw_data}{\code{character} value indicating the name of the raw
data directory. A standard portalcasting directory downloads the raw data
files into from the PortalData repository, so 
\code{raw_data = "PortalData"}.}

\item{source_name}{\code{character} value for the name to give the 
covariate forecast. Currently is \code{"current_archive"}. Previous to
\code{"current_archive"}, the data were retroactively filled in and are 
given the source name \code{"retroactive"}.}

\item{append_cast_csv}{\code{logical} indicator controlling if the new 
cast covariates should be appended to the historical casts later use.}

\item{controls_m}{Additional controls for models not in the prefab set. 
\cr 
A \code{list} of a single model's script-writing controls or a
\code{list} of \code{list}s, each of which is a single model's 
script-writing controls. \cr 
Presently, each model's script writing controls
should include three elements: \code{name} (a \code{character} value of 
the model name), \code{covariates} (a \code{logical} indicator of if the 
model needs covariates), and \code{lag} (an \code{integer}-conformable 
value of the lag to use with the covariates or \code{NA} if 
\code{covariates = FALSE}). \cr 
If only a single model is added, the name of 
the model from the element \code{name} will be used to name the model's
\code{list} in the larger \code{list}. If multiple models are added, each
element \code{list} must be named according to the model and the
\code{name} element. \cr}

\item{controls_r}{Control \code{list} or \code{list} of \code{list}s 
(from \code{\link{rodents_controls}}) specifying the structuring of the 
rodents tables. See \code{\link{rodents_controls}} for details.}

\item{control_cdl}{\code{list} of specifications for the download, which
are sent to \code{\link{NMME_urls}} to create the specific URLs. See
\code{\link{climate_dl_control}}.}

\item{downloads}{\code{list} of arguments to pass to \code{\link{download}}
for raw file downloading.}

\item{quiet}{\code{logical} indicator if progress messages should be
quieted.}

\item{verbose}{\code{logical} indicator of whether or not to print out
all of the information or not (and thus just the tidy messages).}

\item{save}{\code{logical} indicator controlling if the output should 
be saved out.}

\item{overwrite}{\code{logical} indicator of whether or not the existing
files should be updated (most users should leave as \code{TRUE}).}

\item{filename_moons}{\code{character} name of the file for saving the 
moons data.}

\item{filename_config}{\code{character} filename of the directory
configuration YAML.}

\item{filename_cov}{\code{character} filename for saving the output.}

\item{filename_cov_casts}{\code{character} filename for saving the 
covariate casts output.}

\item{filename_meta}{\code{character} filename for saving the metadata.}

\item{cleanup}{\code{logical} indicator if any files put into the tmp
subdirectory should be removed at the end of the process.}

\item{arg_checks}{\code{logical} value of if the arguments should be
checked using standard protocols via \code{\link{check_args}}. The 
default (\code{arg_checks = TRUE}) ensures that all inputs are 
formatted correctly and provides directed error messages if not.}
}
\value{
All \code{fill_} functions return \code{NULL}.
}
\description{
Fill the directory with foundational components. \cr \cr
 \code{fill_dir} combines \code{fill_raw}, \code{fill_casts},
  \code{fill_models}, and \code{fill_data}.
 \code{fill_raw} downloads the raw data and archive and updates the 
  directory configuration metadata accordingly. \cr \cr
 \code{fill_casts} moves the historic casts from the archive into the 
  current directory. \cr \cr
 \code{fill_models} writes out the model scripts to the models
  subdirectory. \cr \cr
 \code{fill_data} prepares model-ready data from the raw data.
}
\details{
Arguments input directly here take precedence over those in the 
 \code{downloads} \code{list}.
}
\examples{
 \donttest{
  create_dir()
  fill_dir()
  fill_raw()
  fill_casts()
  fill_models()
  fill_data()
 }

}
