% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prepare_models.R
\name{model_controls}
\alias{model_controls}
\alias{extract_min_lag}
\alias{extract_data_sets}
\title{Produce the control lists for models}
\usage{
model_controls(models = NULL, controls_model = NULL, quiet = FALSE,
  arg_checks = TRUE)

extract_min_lag(models = prefab_models(), controls_model = NULL,
  quiet = FALSE, arg_checks = TRUE)

extract_data_sets(models = prefab_models(), controls_model = NULL,
  quiet = FALSE, arg_checks = TRUE)
}
\arguments{
\item{models}{\code{character} vector of name(s) of model(s) whose 
script-writing controls need to be included in the \code{list} used
to write the scripts.}

\item{controls_model}{Additional controls for models not in the prefab 
set. \cr 
A \code{list} of a single model's script-writing controls or a
\code{list} of \code{list}s, each of which is a single model's 
script-writing controls. \cr 
Presently, each model's script writing controls should include four 
elements: 
\itemize{
 \item \code{name}: a \code{character} value of the model name.
 \item \code{data_sets}: a \code{character} vector of the data set names
  that the model is applied to. 
 \item \code{covariatesTF}: a \code{logical} indicator of if the 
  model needs covariates.
 \item \code{lag}: an \code{integer}-conformable value of the lag to use 
  with the covariates or \code{NA} if \code{covariatesTF = FALSE}.
} 
If only a single model is added, the name of the model from the element
\code{name} will be used to name the model's \code{list} in the larger
\code{list}. If multiple models are added, each element \code{list} must
be named according to the model and the \code{name} element. \cr 
See \code{Details} and \code{Examples}.}

\item{quiet}{\code{logical} indicator if progress messages should be
quieted.}

\item{arg_checks}{\code{logical} value of if the arguments should be
checked using standard protocols via \code{\link{check_args}}. The 
default (\code{arg_checks = TRUE}) ensures that all inputs are 
formatted correctly and provides directed error messages if not.}
}
\value{
\code{model_controls}: named \code{list} of length equal to
 the number of elements in \code{models} and with elements that are each 
 \code{list}s of those \code{models}'s script-writing controls. \cr \cr
 \code{extract_min_lag}: \code{numeric} value of the minimum non-0 lag
 from any included model or \code{NA} if no models have lags. \cr \cr
 \code{extract_data_sets}: \code{character} vector of the data set names
 from all included models.
}
\description{
The models are written and managed using generalized functions
 that take a few arguments that vary among models, and so this function
 produces the appropriate \code{list} of \code{list}s of model
 script-writing control arguments. The specific \code{models} must be
 input by the user, with the default being \code{NULL}, which returns.
 \code{NULL}. The prefab models (\code{\link{prefab_models}}) have their
 control lists included already, but any user-created model needs to
 have controls provided. See \code{Details}. \cr 
 \strong{Users adding models to the prefab set should add their
 script-writing controls lists to the \code{prefab_controls} object in 
 the source code of the function.} \cr \cr
 \code{extract_min_lag} provides a simple function to extract the 
 minimum non-0 lag time used across models from the controls lists.
}
\details{
Any model that is part of the \code{prefab} set 
 (\code{c("AutoArima", "NaiveArima", "ESSS", "nbGARCH", "nbsGARCH", 
 "pevGARCH", "EDM_simplex")}) 
 has its script-writing controls already included internally
 via the non-exported function \code{prefab_model_controls}. Users 
 only need to include controls for non-prefab \code{models}. \cr \cr
 Any user-defined \code{models} that are not included in \code{controls_m}
 will throw an error. \cr \cr 
 If any user-defined \code{controls_model} duplicate any existing controls
 for the prefab models or if \code{controls_model} contains any duplicate 
 named elements, an error will be thrown unless \code{arg_checks = FALSE},
 in which case, the first user-input element for any and all conflicting 
 copies is selected. This override allows users to test an existing
 prefab model with different configurations, such as on a new data set, 
 without requiring a new model. \cr \cr
 Users interested in adding models to the prefab set should add the
 controls to the \code{prefab_model_controls} non-exported function
 found in the \code{prepare_models.R} script.
}
\examples{
 model_controls(prefab_models())
 controls <- list(name = "xx", data_sets = prefab_data_sets(), 
                  interpolate = FALSE, covariatesTF = FALSE, lag = NA)
 model_controls("xx", controls)
 model_controls(c(prefab_models(), "xx"), controls)
 model_controls(c("xx", "ESSS"), controls)
 extract_min_lag()
 extract_min_lag("AutoArima")
 extract_data_sets()
 extract_data_sets("AutoArima")

}
