% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/paths.R
\name{file_ext}
\alias{file_ext}
\alias{path_no_ext}
\title{Determine a file's extension or remove the extension from the
 file path}
\usage{
file_ext(path, sep_char = ".", arg_checks = TRUE)

path_no_ext(path, sep_char = ".", arg_checks = TRUE)
}
\arguments{
\item{path}{\code{character} value of the file path possibly with an
extension.}

\item{sep_char}{\code{character} value of the separator that delineates
the extension from the file path. Generally, this will be \code{"."},
but for some API URLs, the extension is actually a query component,
so the separator may sometimes need to be \code{"="}.}

\item{arg_checks}{\code{logical} value of if the arguments should be
checked using standard protocols via \code{\link{check_args}}. The 
default (\code{arg_checks = TRUE}) ensures that all inputs are 
formatted correctly and provides directed error messages if not. \cr
However, in sandboxing, it is often desirable to be able to deviate from 
strict argument expectations. Setting \code{arg_checks = FALSE} triggers
many/most/all enclosed functions to not check any arguments using 
\code{\link{check_args}}, and as such, \emph{caveat emptor}.}
}
\value{
\code{character} value of the extension (\code{file_ext}) or the
 path without the extension (\code{path_no_ext}.
}
\description{
Based on the separating character, \code{file_ext} determines
 the file extension and \code{path_no_ext} determines the file path without
 the extension.
}
\examples{
 file_ext("home/folders.with.dots/stuff/ok.csv")
 path_no_ext("home/folders.with.dots/stuff/ok.csv")
 file_ext(NMME_urls()[[1]])
 file_ext(NMME_urls()[[1]], "=")

}
